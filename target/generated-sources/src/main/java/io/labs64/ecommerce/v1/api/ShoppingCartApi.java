/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.14.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package io.labs64.ecommerce.v1.api;

import io.labs64.ecommerce.v1.model.ErrorResponse;
import io.labs64.ecommerce.v1.model.ShoppingCart;
import java.util.UUID;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.ExampleObject;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.lang.Nullable;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-07-23T07:44:20.832994+02:00[Europe/Berlin]", comments = "Generator version: 7.14.0")
@Validated
@Tag(name = "Shopping Cart", description = "Operations to handle the shopping cart.")
public interface ShoppingCartApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /cart/{cartId} : Retrieve a shopping cart by its ID
     * Fetches the details of a specific shopping cart using its unique identifier.
     *
     * @param cartId Unique identifier of the shopping cart to retrieve. (required)
     * @return Shopping cart found and returned successfully. (status code 200)
     *         or Shopping cart with the specified ID not found. (status code 404)
     *         or Internal server error (e.g., failed to retrieve cart data). (status code 500)
     */
    @Operation(
        operationId = "getCartById",
        summary = "Retrieve a shopping cart by its ID",
        description = "Fetches the details of a specific shopping cart using its unique identifier.",
        tags = { "Shopping Cart" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Shopping cart found and returned successfully.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ShoppingCart.class))
            }),
            @ApiResponse(responseCode = "404", description = "Shopping cart with the specified ID not found.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal server error (e.g., failed to retrieve cart data).", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/cart/{cartId}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<ShoppingCart> getCartById(
        @Parameter(name = "cartId", description = "Unique identifier of the shopping cart to retrieve.", required = true, in = ParameterIn.PATH) @PathVariable("cartId") UUID cartId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"totalAmount\" : 0.6027456, \"totalItems\" : 0, \"cartId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"userId\" : \"V12345678\", \"items\" : [ { \"quantity\" : 1, \"productId\" : \"E12345678\", \"price\" : 1200.0, \"productName\" : \"Basic License\" }, { \"quantity\" : 1, \"productId\" : \"E12345678\", \"price\" : 1200.0, \"productName\" : \"Basic License\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : \"INVALID_CART_DATA\", \"message\" : \"The provided cart data is invalid or empty.\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : \"INVALID_CART_DATA\", \"message\" : \"The provided cart data is invalid or empty.\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /cart : Store shopping cart
     * Receives a complete shopping cart entity to initiate the shopping cart.
     *
     * @param shoppingCart The complete shopping cart entity to be processed. (required)
     * @return Shopping Cart published successfully (status code 200)
     *         or Failed to publish Shopping Cart (status code 500)
     */
    @Operation(
        operationId = "saveCart",
        summary = "Store shopping cart",
        description = "Receives a complete shopping cart entity to initiate the shopping cart.",
        tags = { "Shopping Cart" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Shopping Cart published successfully", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = String.class))
            }),
            @ApiResponse(responseCode = "500", description = "Failed to publish Shopping Cart", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = String.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/cart",
        produces = { "text/plain" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<String> saveCart(
        @Parameter(name = "ShoppingCart", description = "The complete shopping cart entity to be processed.", required = true) @Valid @RequestBody ShoppingCart shoppingCart
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
